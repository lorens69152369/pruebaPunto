Sección python

1. ¿Cual es la diferencia entre una lista y un conjunto (set en python)?
La diferencia es que una lista puede tener valores duplicados, ademas sus valores son ordenados y se pueden cambiar y/o agregar valores, mientras que los conjuntos no puede tener valores duplicados, los valores deben 
unicos, un conjunto es desordenado y los valores no se pueden cambiar.

Ejemplo de un conjunto:
prueba_set = {True, "pc", "celular", 7}
print(prueba_set) 

Ejemplo de una lista:
frutas=["manzana","banana","fresa","kiwi"]
print(frutas)

2. ¿Que es un generador en python y en que casos es útil?
Es un tipo de función que retorna un objeto iterador, en este tipo de funciones en vez de return se usa yield para generar una serie de resultados a lo largo del tiempo.
Esto permite que la función genere valores y pause su ejecución después de cada rendimiento, manteniendo su estado entre iteraciones.
puede ser util en el manejo de archivos grandes, puesto que los generadores gestionan partes del archivo del archivo en un momento dado.
Ejemplo:
def generador():
    n = 1
    yield n

    n += 1
    yield n

    n += 1
    yield n

for i in generador():
    print(i)

3. ¿Que ventajas ofrece pandas sobre las estructuras de datos nativas de python para el analisis de datos?
- Panda nos brinda estructuras de datos como dataframe que se puede igualar a una tabla de base de datos, permitiendo asi manejar datos tabulares. 
- Asi mismo, ofrece funciones de manipulación de datos para limpiar y preparar los conjuntos de datos.
- permite indexar y alinear para trabajar con datos de diferentes fuentes.
- Pandas se integra con otras bibliotecas como numpy, Matplotlib y sciPy
- Mejora el rendimiento en comparación con los bucles tradicionales a traves de las operaciones vectorizados.

4. ¿Cual es la diferencia entre apply() y map() y pandas
apply funciona unicamente con objetos de tipo dataframe o series de pandas
ejemplo:
import pandas as pd
df = pd.DataFrame({
    'a':[1,2,3],
    'b':[4,5,6]}
    )

df['suma']=df.apply(lambda row:row['a']+row['b'], axis=1)
print(df)
mientras que map() se usa para aplicar una función a cada elemento de una lista o series de pandas:
import pandas as pd
s = pd.Series([1,2,3,4])
print(s)

s_multi=s.map(lambda x:x*3)
print(s_multi)

